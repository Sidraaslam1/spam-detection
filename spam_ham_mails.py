# -*- coding: utf-8 -*-
"""spam  ham mails.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lMVNr-gpj5J072wNvfe3C5crEAo2-w-l
"""
# linear algebra
import numpy as np
# data processing
import pandas as pd
# data visulization
import seaborn as sns
from matplotlib import pyplot as plt
from matplotlib import style
from sklearn.metrics import confusion_matrix
# Algorithms
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB,MultinomialNB,BernoulliNB
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.pipeline import Pipeline

# read csv file
df = pd.read_csv('email.csv')

#Print top 5 Values
df.head()

df.info()

df['spam']=df['Category'].apply(lambda x: 0 if x=='spam' else 1)
df.head()

X=df['Message']
Y=df['spam']

X_train, X_test, y_train, y_test = train_test_split(X,Y)

#Defineing Naive Baised
clf_NaiveBaised= Pipeline([
    ('vectorizer', CountVectorizer()),
    ('nd', MultinomialNB())
])

#Fiting the algorithm
clf_NaiveBaised.fit(X_train,y_train)

#Make prediction on X_test
y_pred_NB=clf_NaiveBaised.predict(X_test)

conf_mat_NB=confusion_matrix(y_test, y_pred_NB)

plt.figure(figsize=(10,8))
sns.heatmap(conf_mat_NB,annot=True,fmt='d')

naive_acc=accuracy_score(y_test,y_pred_NB)
naive_acc

clf_svm= Pipeline([
    ('vectorizer', CountVectorizer()),
    ('svc', SVC(kernel="rbf",C=1000,gamma=0.001))
])

clf_svm.fit(X_train,y_train)

y_pred_SVM=clf_svm.predict(X_test)

conf_mat_SVM=confusion_matrix(y_test, y_pred_SVM)

plt.figure(figsize=(10,8))
sns.heatmap(conf_mat_SVM,annot=True,fmt='d')

svm_acc=accuracy_score(y_test,y_pred_SVM)
svm_acc

clf_knn= Pipeline([
    ('vectorizer', CountVectorizer()),
    ('knn', KNeighborsClassifier(n_neighbors=3))
])

clf_knn.fit(X_train,y_train)

y_pred_KNN=clf_knn.predict(X_test)

conf_mat_KNN=confusion_matrix(y_test, y_pred_KNN)

plt.figure(figsize=(10,8))
sns.heatmap(conf_mat_KNN,annot=True,fmt='d')

knn_acc=accuracy_score(y_test,y_pred_KNN)
knn_acc

clf_DecisionTree= Pipeline([
    ('vectorizer', CountVectorizer()),
    ('dt',DecisionTreeClassifier())
])

clf_DecisionTree.fit(X_train,y_train)

y_pred_DT=clf_DecisionTree.predict(X_test)

conf_mat_DT=confusion_matrix(y_test, y_pred_DT)

plt.figure(figsize=(10,8))
sns.heatmap(conf_mat_DT,annot=True,fmt='d')

dt_acc=accuracy_score(y_test,y_pred_DT)
dt_acc

clf_rf= Pipeline([
    ('vectorizer', CountVectorizer()),
    ('rf', RandomForestClassifier(n_estimators=100))
])

clf_rf.fit(X_train,y_train)

y_pred_RF=clf_rf.predict(X_test)

conf_mat_RF=confusion_matrix(y_test, y_pred_RF)

plt.figure(figsize=(10,8))
sns.heatmap(conf_mat_DT,annot=True,fmt='d')

rf_acc=accuracy_score(y_test,y_pred_RF)
rf_acc

menMeans = np.array([naive_acc,svm_acc,knn_acc,dt_acc,rf_acc])*100
ind = ['Naive Bayes','SVM','KNN','DT','Random Forest']
fig, ax = plt.subplots(figsize = (20,8))
ax.bar(ind,menMeans,width=0.3,color ='red')
for index,data in enumerate(menMeans):
    plt.text(x=index , y =data+1 , s="{:.2f}".format(data) , fontdict=dict(fontsize=20))
plt.tight_layout()
plt.show()

#Function for testing custome email
def spam_dect(clf,txt):
    a=clf.predict([txt])
    if a==1:
        print("This is a Spam email")
    else:
        print("This is a Real email")

#Demo email
test_email_1="Upto 20% discount on parking, exclusive offer just for you. Dont miss this reward!"
#Spam Email from my mail box
test_email_2="Hey Ashfak, can we get together to watch footbal game tomorrow?"
#Real Email from my mail box

#Predict with Naive Bayes
spam_dect(clf_NaiveBaised,test_email_1)

#Predict with Naive Bayes
spam_dect(clf_NaiveBaised,test_email_2)

import subprocess
import sys

try:
    import streamlit
except ImportError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "streamlit"])


import streamlit as st
import numpy as np
import pandas as pd
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load and prepare the dataset
df = pd.read_csv("/content/email.csv", encoding='latin-1')
df.columns = ['Category', 'Message']
df['spam'] = df['Category'].apply(lambda x: 1 if x == 'spam' else 0)
X = df['Message']
Y = df['spam']
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Create and train the Naive Bayes pipeline
clf = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('nb', MultinomialNB())
])
clf.fit(X_train, y_train)

# Streamlit app UI
st.set_page_config(page_title="Spam Email Detector", layout="centered")
st.title("ðŸ“§ Spam Email Detection App")
st.write("Enter an email message below to check if it's **Spam** or **Real**:")

# Text input
user_input = st.text_area("Your Email Message:")

# Predict button
if st.button("Check Now"):
    prediction = clf.predict([user_input])[0]
    if prediction == 1:
        st.error("ðŸš« This is a Spam Email!")
    else:
        st.success("âœ… This is a Real (Ham) Email!")

# Optional: show model accuracy
if st.checkbox("Show model accuracy"):
    y_pred = clf.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    st.write(f"Model Accuracy on test data: **{acc * 100:.2f}%**")

import subprocess

# Start Streamlit and LocalTunnel
subprocess.Popen(["streamlit", "run", "/content/app.py"])
subprocess.Popen(["npx", "localtunnel", "--port", "8501"])

